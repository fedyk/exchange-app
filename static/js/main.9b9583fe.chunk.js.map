{"version":3,"sources":["servises/open-exchange-rates/open-exchange-rates.ts","store/rates/types.ts","store/rates/actions.ts","store/accounts/types.ts","store/accounts/actions.ts","store/accounts/reducer.ts","types.ts","store/rates/reducer.ts","store/transactions/types.ts","store/transactions/reducer.ts","store/store.ts","servises/rates-sync/rates-sync.ts","constants.ts","helpers/format-money.ts","helpers/is-number.ts","helpers/parse-money.ts","store/transactions/actions.ts","components/DynamicInput.tsx","components/Tabs.tsx","helpers/create-transaction.ts","components/TransactionsList.tsx","components/SyncIcon.tsx","components/Widget.tsx","helpers/get-rates.ts","App.tsx","index.tsx"],"names":["defaultHttpProvider","fetch","OpenExchangeRates","httpProvider","this","signal","then","resp","parseResponse","response","ok","json","parseFx","Error","statusText","status","base","String","rates","SET_RATES","SET_RATES_STATUS","setRatesStatus","type","payload","SET_ACCOUNTS","UPDATE_ACCOUNT","updateAccount","accountId","account","initialState","RatesStatus","Unknown","ADD_TRANSACTION","combinedReducer","redux","state","action","accounts","map","id","Object","assign","transactions","concat","RatesSync","api","store","syncInterval","timer","abort","clearTimeout","dispatch","Syncing","AbortController","fetchRates","setRates","UpToDate","catch","err","OutToDate","finally","scheduleSync","setTimeout","startSync","defaultAccounts","currency","currencySign","balance","precision","fallbackRates","EUR","GBP","formatMoney","amount","symbol","factor","Math","pow","isNumber","value","length","test","includes","parseMoney","Number","replace","isNaN","floor","addTransaction","transaction","DynamicInput","props","className","name","onKeyDown","event","key","onEnterKeyDown","onChange","target","maxLength","ref","inputRef","autoFocus","aria-label","Tabs","items","item","index","selectedIndex","onClick","onSelect","data-role","counter","TransactionsList","dateFormatter","Intl","DateTimeFormat","dateStyle","timeStyle","t","from","fromPrecision","fromCurrencySign","to","toPrecision","toCurrencySign","format","createdAt","SyncIcon","xmlns","viewBox","width","height","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","Widget","fromInputRef","toInputRef","handleFromChange","setState","handleToChange","handleExchange","fromAccount","toAccount","isExchangeDisabled","onAddTransaction","fromCurrency","toCurrency","Date","now","createTransaction","onUpdateAccount","fromAccountIndex","toAccountIndex","React","createRef","fx","getRates","NaN","tabItems","data-testid","handleFromAccountChange","current","focus","handleToAccountChange","renderRate","disabled","title","Component","ConnectedWidget","connect","bindActionCreators","withConnect","App","preloadedState","ratesSync","stopSync","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b9583fe.chunk.js","sourcesContent":["import { Rates } from \"../../types\"\nimport { IOpenExchangeRates } from \"./types\"\n\nconst defaultHttpProvider = (...args: Parameters<typeof fetch>) => {\n  return fetch(...args)\n}\n\nexport class OpenExchangeRates implements IOpenExchangeRates {\n  httpProvider: typeof defaultHttpProvider\n\n  constructor(httpProvider = defaultHttpProvider) {\n    this.httpProvider = httpProvider\n  }\n\n  fetchRates(signal?: AbortSignal): Promise<Rates> {\n    const url = \"https://openexchangerates.org/api/latest.json?app_id=487ba03c696b415ab481a430e1f731bc&symbols=EUR,GBP\"\n\n    return this.httpProvider(url, { signal: signal })\n      .then((resp) => this.parseResponse(resp))\n  }\n\n  private parseResponse(response: Response) {\n    if (response.ok) {\n      return response.json().then(json => this.parseFx(json))\n    }\n    else {\n      throw new Error(`Fail to retrieve FX information: ${response.statusText} (${response.status})`)\n    }\n  }\n\n  private parseFx(json?: any): Rates {\n    const base = String(json?.base ?? \"\")\n    const rates: Record<string, number> = json.rates || {}\n\n    return {\n      base,\n      rates\n    }\n  }\n}","import { Rates, RatesStatus } from \"../../types\";\n\nexport type RatesState = {\n  rates: Rates | null\n  status: RatesStatus \n}\n\nexport const SET_RATES = \"SET_RATES\";\nexport const SET_RATES_STATUS = \"SET_RATES_STATUS\";\n\nexport interface setRatesAction {\n  type: typeof SET_RATES\n  payload: Rates\n}\n\nexport interface setRatesStatusAction {\n  type: typeof SET_RATES_STATUS\n  payload: RatesStatus\n}\n\nexport type ActionTypes = setRatesAction | setRatesStatusAction\n","import { Rates, RatesStatus } from \"../../types\"\nimport { ActionTypes, SET_RATES, SET_RATES_STATUS } from \"./types\"\n\nexport function setRates(rates: Rates): ActionTypes {\n  return {\n    type: SET_RATES,\n    payload: rates\n  }\n}\n\nexport function setRatesStatus(status: RatesStatus): ActionTypes {\n  return {\n    type: SET_RATES_STATUS,\n    payload: status\n  }\n}\n","import { Account } from \"../../types\";\n\nexport type AccountsState = Array<Account>\n\nexport const SET_ACCOUNTS = \"SET_ACCOUNTS\";\nexport const UPDATE_ACCOUNT = \"UPDATE_ACCOUNT\";\n\nexport interface setAccountsAction {\n  type: typeof SET_ACCOUNTS\n  payload: Account[]\n}\n\nexport interface updateAccountAction {\n  type: typeof UPDATE_ACCOUNT\n  payload: {\n    accountId: number,\n    account: Partial<Account>\n  }\n}\n\nexport type ActionTypes = setAccountsAction | updateAccountAction\n","import { Account } from \"../../types\"\nimport { ActionTypes, SET_ACCOUNTS, UPDATE_ACCOUNT } from \"./types\"\n\nexport function setAccounts(accounts: Account[]): ActionTypes {\n  return {\n    type: SET_ACCOUNTS,\n    payload: accounts\n  }\n}\n\nexport function updateAccount(accountId: number, account: Partial<Account>): ActionTypes {\n  return {\n    type: UPDATE_ACCOUNT,\n    payload: {\n      account,\n      accountId\n    }\n  }\n}\n","import { Account } from \"../../types\"\nimport { ActionTypes, AccountsState, SET_ACCOUNTS, UPDATE_ACCOUNT } from \"./types\"\n\nconst initialState: AccountsState = []\n\nexport function accountsReducers(state = initialState, action: ActionTypes): AccountsState {\n  switch (action.type) {\n    case SET_ACCOUNTS:\n      return action.payload\n\n    case UPDATE_ACCOUNT:\n      return state.map(function (account) {\n        if (account.id === action.payload.accountId) {\n          return Object.assign({}, account, action.payload.account) as Account\n        }\n\n        return account\n      })\n\n    default:\n      return state\n  }\n}\n","export interface Rates {\n  base: string\n  rates: Record<string, number>\n}\n\nexport enum RatesStatus {\n  Unknown,\n  Syncing,\n  UpToDate,\n  OutToDate\n}\n\nexport interface Account {\n  id: number\n  currency: string\n  currencySign: string\n  balance: number\n  precision: number\n}\n\nexport interface Transaction {\n  id: number\n  from: number\n  fromPrecision: number\n  fromCurrency: string\n  fromCurrencySign: string\n  to: number\n  toPrecision: number\n  toCurrency: string\n  toCurrencySign: string\n  createdAt: number\n}\n","import { RatesStatus } from \"../../types\"\nimport { ActionTypes, RatesState, SET_RATES, SET_RATES_STATUS } from \"./types\"\n\nconst initialState: RatesState = {\n  rates: null,\n  status: RatesStatus.Unknown,\n}\n\nexport function ratesReducers(state = initialState, action: ActionTypes): RatesState {\n  switch (action.type) {\n    case SET_RATES:\n      return {\n        ...state,\n        rates: action.payload\n      }\n\n    case SET_RATES_STATUS:\n      return {\n        ...state,\n        status: action.payload\n      }\n\n    default:\n      return state\n  }\n}\n","import { Transaction } from \"../../types\";\n\nexport type TransactionsState = Transaction[]\n\nexport const ADD_TRANSACTION = \"ADD_TRANSACTION\";\n\nexport interface addTransactionAction {\n  type: typeof ADD_TRANSACTION\n  payload: Transaction\n}\n\nexport type ActionTypes = addTransactionAction\n","import { ActionTypes, TransactionsState, ADD_TRANSACTION } from \"./types\"\n\nconst initialState: TransactionsState = []\n\nexport function transactionsReducers(state = initialState, action: ActionTypes): TransactionsState {\n  switch (action.type) {\n    case ADD_TRANSACTION:\n      return [action.payload].concat(state)\n\n    default:\n      return state\n  }\n}\n","import * as redux from \"redux\"\nimport { accountsReducers } from \"./accounts/reducer\"\nimport { ratesReducers } from \"./rates/reducer\"\nimport { transactionsReducers } from \"./transactions/reducer\"\n\nconst combinedReducer = redux.combineReducers({\n  rates: ratesReducers,\n  accounts: accountsReducers,\n  transactions: transactionsReducers,\n})\n\nexport type RootState = ReturnType<typeof combinedReducer>\n\nexport type Store = ReturnType<typeof createStore>\n\nexport function createStore(preloadedState?: Partial<RootState>) {\n  return redux.createStore(combinedReducer, preloadedState)\n}\n","import { IOpenExchangeRates } from \"../open-exchange-rates/types\";\nimport { Store, setRates, setRatesStatus } from \"../../store\";\nimport { RatesStatus } from \"../../types\";\n\nexport class RatesSync {\n  api: IOpenExchangeRates\n  store: Store\n  timer?: number\n  abort?: AbortController\n  syncInterval: number\n\n  constructor(api: IOpenExchangeRates, store: Store, syncInterval = 1 * 1000) {\n    this.api = api\n    this.store = store\n    this.syncInterval = syncInterval\n  }\n\n  stopSync() {\n    this.abort?.abort()\n    clearTimeout(this.timer)\n  }\n\n  startSync() {\n    this.store.dispatch(setRatesStatus(RatesStatus.Syncing))\n\n    // cancel prev request\n    if (this.abort) {\n      this.abort.abort()\n    }\n\n    this.abort = new AbortController()\n\n    return this.api.fetchRates(this.abort.signal)\n      .then(rates => {\n        this.store.dispatch(setRates(rates))\n        this.store.dispatch(setRatesStatus(RatesStatus.UpToDate))\n      })\n      .catch(err => {\n        this.store.dispatch(setRatesStatus(RatesStatus.OutToDate))\n      })\n      .finally(() => {\n        this.scheduleSync()\n      })\n  }\n\n  protected scheduleSync() {\n    // typescript magic to force DOM typings for `setTimeout`\n    const callback: Function = () => this.startSync()\n\n    this.timer = setTimeout(callback, this.syncInterval)\n  }\n}\n","import { Account, Rates } from \"./types\";\n\nexport const defaultAccounts: Account[] = [{\n  id: 1,\n  currency: \"USD\",\n  currencySign: \"$\",\n  balance: 204554,\n  precision: 2\n}, {\n  id: 2,\n  currency: \"EUR\",\n  currencySign: \"€\",\n  balance: 25000,\n  precision: 2\n}, {\n  id: 3,\n  currency: \"GBP\",\n  currencySign: \"£\",\n  balance: 5833,\n  precision: 2\n}]\n\n/**\n * The API for rates has a strict limits. In order to peovide stable demo,\n * the demo app will fall back to test data when API quota is exceeded\n */\nexport const fallbackRates: Rates = {\n  base: \"USD\",\n  rates: {\n    EUR: 0.842857,\n    GBP: 0.722836\n  }\n}","export function formatMoney(amount: number, precision: number, symbol: string) {\n  const factor = Math.pow(10, precision)\n\n  return `${symbol}${amount / factor}`\n}\n","export function isNumber(value: string) {\n  if (value.length === 0) {\n    return true\n  }\n\n  if (/^\\d+$/.test(value)) {\n    return true\n  }\n\n  if (value.includes(\".\") && /^\\d+\\.\\d*$/.test(value)) {\n    return true\n  }\n\n  if (value.includes(\",\") && /^\\d+,\\d*$/.test(value)) {\n    return true\n  }\n\n  return false\n}\n","export function parseMoney(value: string, precision: number) {\n  const amount = Number(value.replace(\",\", \".\"))\n\n  if (Number.isNaN(amount)) {\n    return amount\n  }\n\n  const factor = Math.pow(10, precision)\n\n  return Math.floor(amount * factor)\n}\n","import { Transaction } from \"../../types\"\nimport { ActionTypes, ADD_TRANSACTION } from \"./types\"\n\nexport function addTransaction(transaction: Transaction): ActionTypes {\n  return {\n    type: ADD_TRANSACTION,\n    payload: transaction\n  }\n}\n","import React from \"react\";\nimport \"./DynamicInput.css\";\n\ninterface Props {\n  name: string\n  value: string\n  inputRef?: React.RefObject<HTMLInputElement>\n  autoFocus?: boolean\n  onChange(value: string): void\n  onEnterKeyDown?(): void\n}\n\nexport function DynamicInput(props: Props) {\n  function handleKeyDown(event: React.KeyboardEvent) {\n    if (event.key === \"Enter\" && typeof props.onEnterKeyDown === \"function\") {\n      props.onEnterKeyDown()\n    }\n  }\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    if (typeof props.onChange === \"function\") {\n      props.onChange(event.target.value)\n    }\n  }\n\n  return (\n    <div className=\"dynamic-input\">\n      <span className=\"dynamic-input-space-keeper\">{props.value}</span>\n      <input\n        type=\"text\"\n        className=\"dynamic-input-control\"\n        name={props.name}\n        value={props.value}\n        onKeyDown={handleKeyDown}\n        onChange={handleChange}\n        maxLength={10}\n        ref={props.inputRef}\n        autoFocus={props.autoFocus}\n        aria-label={props.name}\n      />\n    </div>\n  )\n}\n","import React from \"react\";\nimport \"./Tabs.css\";\n\ninterface Props {\n  items: string[]\n  selectedIndex: number\n  onSelect(index: number): void\n}\n\nexport function Tabs(props: Props) {\n  return (\n    <div className=\"tabs\">\n      {props.items.map((item, index) => {\n        const className = `tab ${index === props.selectedIndex ? \"active\" : \"\"}`\n        const handleClick = () => props.onSelect(index)\n\n        return (\n          <button key={index} className={className} onClick={handleClick} data-role=\"tab-item\">{item}</button>\n        )\n      })}\n    </div>\n  )\n}\n","import { Account, Transaction } from \"../types\"\n\nlet counter = 0\n\nexport function createTransaction(from: number, to: number, fromAccount: Account, toAccount: Account): Transaction {\n  return {\n    id: ++counter,\n    from: from,\n    fromPrecision: fromAccount.precision,\n    fromCurrency: fromAccount.currency,\n    fromCurrencySign: fromAccount.currencySign,\n    to: to,\n    toPrecision: toAccount.precision,\n    toCurrency: toAccount.currency,\n    toCurrencySign: toAccount.currencySign,\n    createdAt: Date.now(),\n  }\n}","import React from \"react\";\nimport { Transaction } from \"../types\";\nimport { formatMoney } from \"../helpers/format-money\";\nimport \"./TransactionsList.css\"\n\ninterface Props {\n  transactions: Transaction[]\n}\n\nexport function TransactionsList(props: Props) {\n  const dateFormatter = new Intl.DateTimeFormat(\"en-US\", {\n    dateStyle: \"short\",\n    timeStyle: \"short\",\n  })\n\n  return props.transactions.length === 0\n    ? (\n      <div className=\"transactions-empty-state\">Your upcoming transfers will appear here</div>\n    )\n    : (\n      <div className=\"transactions\">\n        {props.transactions.map(t => (\n          <div className=\"transaction\" key={t.id}>\n            <div className=\"transaction-row\">\n              <div className=\"transaction-primary-cell\">{`Exchanged ${formatMoney(t.from, t.fromPrecision, t.fromCurrencySign)} to ${formatMoney(t.to, t.toPrecision, t.toCurrencySign)}`}</div>\n              <div className=\"transaction-primary-cell accent\">+{formatMoney(t.from, t.fromPrecision, t.fromCurrencySign)}</div>\n            </div>\n            <div className=\"transaction-row\">\n              <div className=\"transaction-secondary-cell\">{dateFormatter.format(t.createdAt)}</div>\n              <div className=\"transaction-secondary-cell\">-{formatMoney(t.to, t.toPrecision, t.toCurrencySign)}</div>\n            </div>\n          </div>\n        ))}\n      </div>\n    )\n}\n","import React from \"react\";\n\ninterface Props {\n  width: number\n  height: number\n}\n\nexport function SyncIcon(props: Props) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"icon\"\n      viewBox=\"0 0 512 512\"\n      width={props.width || 512}\n      height={props.height || 512}\n    >\n      <path\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"32\"\n        d=\"M434.67 285.59v-29.8c0-98.73-80.24-178.79-179.2-178.79a179 179 0 00-140.14 67.36m-38.53 82v29.8C76.8 355 157 435 256 435a180.45 180.45 0 00140-66.92\"\n      ></path>\n      <path\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"32\"\n        d=\"M32 256l44-44 46 44m358 0l-44 44-46-44\"\n      ></path>\n    </svg>\n  );\n}\n","import React from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { formatMoney } from \"../helpers/format-money\";\nimport { getRates } from \"../helpers/get-rates\";\nimport { isNumber } from \"../helpers/is-number\";\nimport { parseMoney } from \"../helpers/parse-money\";\nimport { RootState, updateAccount } from \"../store\";\nimport { addTransaction } from \"../store/transactions/actions\";\nimport { Account, Rates, Transaction, RatesStatus } from \"../types\";\nimport { DynamicInput } from \"./DynamicInput\";\nimport { Tabs } from \"./Tabs\";\nimport { createTransaction } from \"../helpers/create-transaction\";\nimport { TransactionsList } from \"./TransactionsList\";\nimport { SyncIcon } from \"./SyncIcon\";\nimport \"./Widget.css\";\n\ninterface ConnectedProps {\n  rates: Rates | null\n  status: RatesStatus\n  accounts: Account[]\n  transactions: Transaction[]\n}\n\ninterface ConnectedDispachers {\n  onAddTransaction(transaction: Transaction): void\n  onUpdateAccount(accountId: number, account: Partial<Account>): void\n}\n\ninterface Props extends ConnectedProps, ConnectedDispachers { }\n\ninterface State {\n  to: string,\n  from: string,\n  fromAccountIndex: number\n  toAccountIndex: number\n}\n\nexport class Widget extends React.Component<Props, State> {\n  fromInputRef: React.RefObject<HTMLInputElement>\n  toInputRef: React.RefObject<HTMLInputElement>\n\n  constructor(props: Props) {\n    super(props)\n\n    this.state = {\n      to: \"\",\n      from: \"\",\n      fromAccountIndex: 0,\n      toAccountIndex: 1,\n    }\n\n    this.fromInputRef = React.createRef()\n    this.toInputRef = React.createRef()\n  }\n\n  handleFromAccountChange(fromAccountIndex: number) {\n    let toAccountIndex = this.state.toAccountIndex\n\n    // swap accounts\n    if (toAccountIndex === fromAccountIndex) {\n      toAccountIndex = this.state.fromAccountIndex\n    }\n\n    this.setState({ fromAccountIndex, toAccountIndex })\n  }\n\n  handleToAccountChange(toAccountIndex: number) {\n    let fromAccountIndex = this.state.fromAccountIndex\n\n    // swap accounts\n    if (fromAccountIndex === toAccountIndex) {\n      fromAccountIndex = this.state.toAccountIndex\n    }\n\n    this.setState({ toAccountIndex, fromAccountIndex })\n  }\n\n  handleFromChange = (from: string) => {\n    if (!isNumber(from)) {\n      return\n    }\n\n    this.setState({\n      from: from,\n      to: \"\"\n    })\n  }\n\n  handleToChange = (to: string) => {\n    if (!isNumber(to)) {\n      return\n    }\n\n    this.setState({\n      to: to,\n      from: \"\"\n    })\n  }\n\n  handleExchange = () => {\n    const fromAccount = this.fromAccount\n    const toAccount = this.toAccount\n\n    if (!fromAccount || !toAccount || !this.props.rates) {\n      return\n    }\n\n    if (this.isExchangeDisabled) {\n      return\n    }\n\n    const from = parseMoney(this.from, fromAccount.precision)\n    const to = parseMoney(this.to, toAccount.precision)\n\n    if (Number.isNaN(from) || Number.isNaN(to)) {\n      return\n    }\n\n    this.props.onAddTransaction(createTransaction(from, to, fromAccount, toAccount))\n    this.props.onUpdateAccount(fromAccount.id, { balance: (fromAccount.balance - from) })\n    this.props.onUpdateAccount(toAccount.id, { balance: toAccount.balance + to })\n    this.setState({ from: \"\", to: \"\" })\n  }\n\n  get rates() {\n    const fromAccount = this.fromAccount\n    const toAccount = this.toAccount\n\n    if (!fromAccount || !toAccount || !this.props.rates) {\n      return NaN;\n    }\n\n    return getRates(fromAccount.currency, toAccount.currency, this.props.rates)\n  }\n\n  get from() {\n    const fromAccount = this.fromAccount\n    const toAccount = this.toAccount\n    const rates = this.rates\n\n    if (this.state.to && fromAccount && toAccount && !Number.isNaN(rates)) {\n      const to = parseMoney(this.state.to, toAccount.precision)\n      const factor = Math.pow(10, fromAccount.precision)\n\n      if (!Number.isNaN(to)) {\n        return `${Math.floor(to / rates) / factor}`\n      }\n    }\n\n    return this.state.from\n  }\n\n  get to() {\n    const fromAccount = this.fromAccount\n    const toAccount = this.toAccount\n    const rates = this.rates\n\n    if (this.state.from && fromAccount && toAccount && !Number.isNaN(rates)) {\n      const from = parseMoney(this.state.from, fromAccount.precision)\n      const factor = Math.pow(10, toAccount.precision)\n\n      if (!Number.isNaN(from)) {\n        return `${Math.floor(from * rates) / factor}`\n      }\n    }\n\n    return this.state.to\n  }\n\n  get isExchangeDisabled() {\n    const fromAccount = this.fromAccount\n    const toAccount = this.toAccount\n\n    if (!fromAccount || !toAccount || !this.props.rates) {\n      return true\n    }\n\n    const from = parseMoney(this.from, fromAccount.precision)\n\n    if (Number.isNaN(from) || from === 0) {\n      return true\n    }\n\n    if (fromAccount.balance < from) {\n      return true\n    }\n\n    return false\n  }\n\n  get fromAccount() {\n    return this.props.accounts[this.state.fromAccountIndex]\n  }\n\n  get toAccount() {\n    return this.props.accounts[this.state.toAccountIndex]\n  }\n\n  render() {\n    const tabItems = this.props.accounts.map(account => account.currency)\n\n    return (\n      <div className=\"container\">\n        <div className=\"widget\">\n          <div className=\"account\">\n            <div className=\"account-header\" data-testid=\"from-account\">\n              <div className=\"account-title\">Exchange</div>\n              <Tabs\n                items={tabItems}\n                selectedIndex={this.state.fromAccountIndex}\n                onSelect={index => this.handleFromAccountChange(index)}\n              />\n            </div>\n            <div className=\"input-box\" onClick={() => this.fromInputRef.current?.focus()}>\n              <div className=\"input-box-body\">\n                {this.from && <span className=\"exchange-direction\">-</span>}\n                <DynamicInput\n                  name=\"from-input\"\n                  value={this.from}\n                  onChange={this.handleFromChange}\n                  onEnterKeyDown={this.handleExchange}\n                  inputRef={this.fromInputRef} autoFocus\n                />\n              </div>\n              <div className=\"input-box-footer\">\n                <div className=\"hint\">{this.fromAccount ? `You have ${formatMoney(this.fromAccount.balance, this.fromAccount.precision, this.fromAccount.currencySign)}` : \"\"}</div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"account\" data-testid=\"to-account\">\n            <Tabs\n              items={tabItems}\n              selectedIndex={this.state.toAccountIndex}\n              onSelect={index => this.handleToAccountChange(index)}\n            />\n            <div className=\"input-box\" onClick={() => this.toInputRef.current?.focus()}>\n              <div className=\"input-box-body\">\n                {this.to && <span className=\"exchange-direction\">+</span>}\n                <DynamicInput\n                  name=\"to-input\"\n                  value={this.to}\n                  onChange={this.handleToChange}\n                  onEnterKeyDown={this.handleExchange}\n                  inputRef={this.toInputRef}\n                />\n              </div>\n              <div className=\"input-box-footer\">\n                <div className=\"hint\">{this.toAccount ? `You have ${formatMoney(this.toAccount.balance, this.toAccount.precision, this.toAccount.currencySign)}` : \"\"}</div>\n                <div className=\"hint\">{this.renderRate()}</div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"widget-footer\">\n            <button className=\"primary-btn\" disabled={this.isExchangeDisabled} onClick={this.handleExchange} aria-label=\"exchange-button\">Exchange</button>\n          </div>\n        </div>\n\n        <TransactionsList transactions={this.props.transactions} />\n      </div>\n    );\n  }\n\n  renderRate() {\n    const fromAccount = this.fromAccount\n    const toAccount = this.toAccount\n    const rates = this.rates\n\n    if (!fromAccount || !toAccount || Number.isNaN(rates)) {\n      return null\n    }\n\n    const from = formatMoney(1 * Math.pow(10, fromAccount.precision), fromAccount.precision, fromAccount.currencySign)\n    const to = formatMoney(1 * Math.floor(Math.pow(10, toAccount.precision) * rates), toAccount.precision, toAccount.currencySign)\n\n    return (\n      <span className=\"current-rates\">\n        {this.props.status === RatesStatus.Syncing && (\n          <span title=\"Update exchange rates\" className=\"current-rates-icon\">\n            <SyncIcon width={16} height={16} />\n          </span>\n        )}\n        <span>{`${from} = ${to}`}</span>\n      </span>\n    )\n  }\n}\n\nfunction mapStateToProps(state: RootState): ConnectedProps {\n  return {\n    rates: state.rates.rates,\n    status: state.rates.status,\n    accounts: state.accounts,\n    transactions: state.transactions,\n  }\n}\n\n// @ts-ignore\nconst withConnect = connect<ConnectedProps, ConnectedDispachers>(mapStateToProps, function (dispatch) {\n  return {\n    onAddTransaction: bindActionCreators(addTransaction, dispatch),\n    onUpdateAccount: bindActionCreators(updateAccount, dispatch),\n  }\n})\n\n// @ts-ignore\nexport const ConnectedWidget: React.ComponentClass<{}> = withConnect(Widget)\n","import { Rates } from \"../types\";\n\nexport function getRates(from: string, to: string, fx: Rates) {\n  const rates = Object.assign({}, fx.rates)\n\n  rates[fx.base] = 1\n\n  if (!rates[from] || !rates[to]) {\n    throw new Error(\"Missed FX rates\")\n  }\n\n  if (from === fx.base) {\n    return rates[to]\n  }\n\n  if (to === fx.base) {\n    return 1 / rates[from];\n  }\n\n  return rates[to] * (1 / rates[from])\n}\n","import React from \"react\";\nimport { Provider as ReactReduxProvider } from \"react-redux\";\nimport { OpenExchangeRates } from \"./servises/open-exchange-rates/open-exchange-rates\";\nimport { createStore, Store } from \"./store\";\nimport { RatesSync } from \"./servises/rates-sync/rates-sync\";\nimport { defaultAccounts, fallbackRates } from \"./constants\";\nimport { ConnectedWidget } from \"./components/Widget\";\nimport { RatesStatus } from \"./types\";\nimport \"./App.css\";\n\ninterface Props { }\n\nclass App extends React.Component {\n  api: OpenExchangeRates\n  store: Store\n  ratesSync: RatesSync\n\n  constructor(props: Props) {\n    super(props)\n    this.api = new OpenExchangeRates()\n    this.store = createStore({\n      accounts: defaultAccounts,\n      rates: {\n        rates: fallbackRates, // openexchangerates limits can be excosted, have a defaul fallback will improve demo experience\n        status: RatesStatus.Unknown,\n      }\n    })\n    this.ratesSync = new RatesSync(this.api, this.store)\n  }\n\n  componentDidMount() {\n    this.ratesSync.startSync()\n  }\n\n  componentWillUnmount() {\n    this.ratesSync.stopSync()\n  }\n\n  render() {\n    return (\n      <ReactReduxProvider store={this.store}>\n        <ConnectedWidget />\n      </ReactReduxProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}